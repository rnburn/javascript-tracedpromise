{"version":3,"sources":["../../src/examples/demo.js"],"names":[],"mappings":";;AACA;;IAAY,W;;AACZ;;;;AACA;;;;;;;;AAEA;AACA,QAAQ,oBAAR;;AAEA;AACA;AACA;AAVA;AAWA,YAAY,gBAAZ,CAA6B,IAAI,0BAAU,MAAd,CAAqB;AAC9C,kBAAiB,qBAD6B;AAE9C,oBAAiB;AAF6B,CAArB,CAA7B;;AAKA;AACA,IAAI,SAAS,YAAY,YAAZ,GAA2B,SAA3B,CAAqC,cAArC,CAAb;;AAEA;AACA;AACA;AACA;AACA,IAAI,KAAK,eAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1D,eAAW,OAAX,EAAoB,GAApB,EAAyB,KAAzB;AACH,CAFQ,CAAT;AAGA,IAAI,KAAK,eAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1D,eAAW,OAAX,EAAoB,GAApB,EAAyB,KAAzB;AACH,CAFQ,CAAT;AAGA,IAAI,KAAK,eAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1D,eAAW,OAAX,EAAoB,GAApB,EAAyB,OAAzB;AACH,CAFQ,CAAT;AAGA,IAAI,KAAK,eAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1D,eAAW,OAAX,EAAoB,GAApB,EAAyB,MAAzB;AACH,CAFQ,CAAT;AAGA,IAAI,KAAK,eAAkB,MAAlB,EAA0B,IAA1B,EAAgC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC1D,eAAW,MAAX,EAAmB,GAAnB,EAAwB,UAAxB;AACH,CAFQ,CAAT;AAGA,IAAI,YAAY;AACd,gBAAa,CAAE,YAAY,WAAZ,CAAwB,OAAO,OAAP,EAAxB,CAAF;AADC,CAAhB;AAGA,IAAI,KAAK,eAAkB,SAAlB,EAA6B,IAA7B,EAAmC,UAAC,OAAD,EAAU,MAAV,EAAqB;AAC7D,eAAW,OAAX,EAAoB,GAApB,EAAyB,KAAzB;AACH,CAFQ,CAAT;;AAIA;AACA,WAAc,GAAd,CAAkB,MAAlB,EAA0B,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,CAA1B,EAAoD,IAApD,CAAyD,iBAAS;AAC9D,YAAQ,GAAR,gBAAyB,KAAzB;AACH,CAFD,EAEG,kBAAU;AACT,YAAQ,GAAR,gBAAyB,MAAzB;AACH,CAJD","file":"demo.js","sourcesContent":["/* eslint-disable no-console */\nimport * as opentracing from 'opentracing';\nimport lightstep from 'lightstep-tracer';\nimport TracedPromise from '../..';\n\n// Ensure the Node line numbers are accurate in stack traces\nrequire('source-map-support');\n\n// Initialize the tracing implementation, in this case LightStep is used.\n// Replace '{your_access_token}' with your LightStep access token to send the\n// tracing data to your project.\nopentracing.initGlobalTracer(new lightstep.Tracer({\n    access_token   : '{your_access_token}',\n    component_name : 'TracedPromise',\n}));\n\n// Set up an initial span to track all the subsequent work\nlet parent = opentracing.globalTracer().startSpan('Promises.all');\n\n// Set up the child promises that run in parallel.\n// Simply timeouts are being used here. In a real world application, these might\n// be any asynchronous operation: file i/o, database transactions, network\n// requests, etc.\nlet p1 = new TracedPromise(parent, 'p1', (resolve, reject) => {\n    setTimeout(resolve, 100, 'one');\n});\nlet p2 = new TracedPromise(parent, 'p2', (resolve, reject) => {\n    setTimeout(resolve, 200, 'two');\n});\nlet p3 = new TracedPromise(parent, 'p3', (resolve, reject) => {\n    setTimeout(resolve, 300, 'three');\n});\nlet p4 = new TracedPromise(parent, 'p4', (resolve, reject) => {\n    setTimeout(resolve, 400, 'four');\n});\nlet p5 = new TracedPromise(parent, 'p5', (resolve, reject) => {\n    setTimeout(reject, 250, 'failure!');\n});\nlet p6Options = {\n  references : [ opentracing.followsFrom(parent.context()) ],\n};\nlet p6 = new TracedPromise(p6Options, 'p6', (resolve, reject) => {\n    setTimeout(resolve, 600, 'six');\n});\n\n// Wait for the child promises to resolve or reject and then handle the result.\nTracedPromise.all(parent, [p1, p2, p3, p4, p5, p6]).then(value => {\n    console.log(`Resolved: ${value}`);\n}, reason => {\n    console.log(`Rejected: ${reason}`);\n});\n"]}